{"version":3,"sources":["components/Navigation.js","components/ShareButton.js","components/ArrowCounter.js","components/CardTitle.js","components/CardLinkButton.js","components/Loading.js","components/Questions.js","components/CardIcons.js","components/QuestionCardContent.js","components/Question.js","components/AddQuestion.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","href","ShareButton","Button","onClick","alert","ArrowCounter","upVote","downVote","index","classes","question","Box","icons","IconButton","aria-label","positiveIcon","negativeIcon","positiv","CardTitle","title","Typography","variant","component","subtitle","CardLinkButton","paper","id","_id","key","to","color","button","Loading","useStyles","makeStyles","theme","card","maxWidth","minWidth","maxHeight","minHeight","marginBottom","marginTop","display","justifyContent","alignItems","flexDirection","margin","padding","background","borderRadius","position","Grid","flexWrap","spacing","width","Questions","questions","container","justify","xs","item","map","Card","CardIcons","CardActions","disableSpacing","QuestionCardCOntent","backgroundColor","spaceBetween","favoriteIcon","Question","getquestionid","console","log","space","CardHeader","subheader","category","CardContent","QuestionCardContent","textField","marginLeft","marginRight","AddQuestion","useState","upVotes","isCompleted","value","setValue","handleApi","e","preventDefault","a","fetch","method","headers","body","JSON","stringify","rawResponse","json","content","onChange","event","target","name","onSubmit","TextField","placeholder","root","flexGrow","questionGrid","text","Boolean","window","location","hostname","match","ReactDOM","render","document","answers","setQuestions","useEffect","res","fetchData","path","newVote","find","q","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAaeA,EAVI,WACf,OACI,yBAAKC,UAAU,cACX,uBAAGC,KAAK,KAAR,QACA,uBAAGA,KAAK,KAAR,aACA,uBAAGA,KAAK,KAAR,qB,uFCCGC,EANK,WAChB,OACI,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMC,MAAM,4BAA7B,UCmCOC,EA7BM,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,QAAQC,EAAc,EAAdA,SACpD,OACI,6BACI,kBAACC,EAAA,EAAD,KACA,yBAAKZ,UAAWU,EAAQG,OACpB,6BACQ,kBAACC,EAAA,EAAD,CAAYV,QAAS,kBAAMG,EAAOE,IAAQM,aAAW,MACjD,kBAAC,IAAD,CACIf,UAAYW,EAASJ,QAAU,EAAKG,EAAQM,aAAeN,EAAQO,gBAG3E,kBAACH,EAAA,EAAD,CACIV,QAAS,kBAAMI,EAASC,IAAQM,aAAW,QAE3C,kBAAC,IAAD,CACAf,UAAYW,EAASJ,QAAU,EAAKG,EAAQO,aAAeP,EAAQQ,YAI3E,6BACI,kBAAC,EAAD,WClBTC,EAVG,SAAC,GAAyB,IAAxBR,EAAuB,EAAvBA,SAAUD,EAAa,EAAbA,QAC1B,OACI,yBAAKV,UAAWU,EAAQU,OACpB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,IAAIC,UAAU,KAAKZ,EAASS,OAChD,kBAACC,EAAA,EAAD,CAAYC,QAAQ,IAAIC,UAAU,KAAKZ,EAASa,Y,QCS7CC,EAZQ,SAAC,GAAgC,IAA/Bf,EAA8B,EAA9BA,QAASD,EAAqB,EAArBA,MAAOE,EAAc,EAAdA,SACrC,OACI,kBAAC,IAAD,CACIX,UAAWU,EAAQgB,MACnBC,GAAIhB,EAASiB,IACbC,IAAKpB,EACLA,MAAOA,EACPqB,GAAE,oBAAenB,EAASiB,MAAO,kBAACzB,EAAA,EAAD,CAAQ4B,MAAM,UAAU/B,UAAWU,EAAQsB,QAA3C,cCH9BC,EANC,WACZ,OACI,4CCQFC,EAAYC,KAAY,SAAAC,GAAK,MAAI,CACnCC,KAAO,CACHC,SAAW,IACXC,SAAW,IACXC,UAAY,IACZC,UAAY,IACZC,aAAe,GACfC,UAAY,GACZC,QAAU,OACVC,eAAiB,SACjBC,WAAa,SACbC,cAAgB,SAChBC,OAAS,EACTC,QAAU,IAEd7B,MAAQ,CACJwB,QAAU,OACVM,WAAa,aACbC,aAAe,EACfF,QAAU,GACVG,SAAW,WACXT,WAAa,KAEjBU,KAAO,CACHT,QAAS,OACTE,WAAY,SACZC,cAAgB,MAChBO,SAAW,QAEfjC,WAAa,CACTsB,UAAY,IAEhBX,OAAS,CACLgB,OAAQZ,EAAMmB,QAAQ,IAE1B1C,MAAQ,CACJ2C,MAAO,IACPZ,QAAU,OACVG,cAAgB,MAChBF,eAAiB,iBAErB5B,aAAe,CACXc,MAAQ,OAEZf,aAAe,CACXe,MAAQ,aA8CD0B,MA1Cf,YAAkD,IAA9BC,EAA6B,EAA7BA,UAAWnD,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SAE7BE,EAAUwB,IAqChB,OAlCgBwB,EAEZ,kBAACL,EAAA,EAAD,CAAMM,WAAS,EAACC,QAAQ,SAASd,WAAW,SAASe,GAAI,IACrD,kBAACxC,EAAA,EAAD,CAAYrB,UAAWU,EAAQW,WAAYC,QAAQ,KAAKC,UAAU,MAAlE,aACJ,kBAAC8B,EAAA,EAAD,CAAMO,QAAQ,SAASd,WAAW,SAASa,WAAS,EAACG,MAAI,EAACD,GAAI,GAAIN,QAAS,EAAGvD,UAAWU,EAAQ2C,MAChGK,EAAUK,KAAI,SAACpD,EAAUF,GAEtB,OACI,kBAACG,EAAA,EAAD,KACQ,kBAACoD,EAAA,EAAD,CAAMhE,UAAWU,EAAQ2B,MACjB,kBAAC,EAAD,CACI3B,QAASA,EACTC,SAAUA,IAEd,kBAAC,EAAD,CACID,QAASA,EACTD,MAAOA,EACPE,SAAUA,IAEV,qCAAWA,EAASJ,QACxB,kBAAC,EAAD,CACIA,OAAQA,EACRC,SAAUA,EACVE,QAASA,EACTC,SAAUA,EACVF,MAAOA,WAzBV,kBAAC,EAAD,O,6DChDlBwD,EAZG,WACd,OACA,kBAACC,EAAA,EAAD,CAAaC,gBAAc,GACvB,kBAACrD,EAAA,EAAD,CAAYC,aAAW,oBACnB,kBAAC,IAAD,OAEJ,kBAACD,EAAA,EAAD,CAAYC,aAAW,SACnB,kBAAC,IAAD,SCGGqD,EAba,SAAC,GAAgB,IAAfzD,EAAc,EAAdA,SAC1B,OACA,6BACI,kBAACU,EAAA,EAAD,CAAYC,QAAQ,KAAKS,MAAM,gBAAgBR,UAAU,KAAzD,aACeZ,EAASa,UAExB,kBAACH,EAAA,EAAD,CAAYC,QAAQ,KAAKS,MAAM,gBAAgBR,UAAU,KAAzD,WACaZ,EAASJ,UCAxB2B,EAAYC,IAAY,CAC1BE,KAAO,CACHO,QAAU,OACVG,cAAgB,SAChBD,WAAa,SACbD,eAAiB,SACjBF,UAAY,IAEhBU,KAAO,CACHT,QAAS,OACTE,WAAY,SACZC,cAAgB,OAEpBnC,IAAM,CACFyD,gBAAkB,OAEtBC,aAAe,CACX1B,QAAS,OACTC,eAAiB,iBAErB0B,aAAe,CACXxC,MAAO,SAgCAyC,MA5Bf,YAAwC,IAArBC,EAAoB,EAApBA,cAAe9C,EAAK,EAALA,GACxBjB,EAAUwB,IACVvB,EAAW8D,EAAc9C,GAuB/B,OApBA+C,QAAQC,IAAIhE,GAEMA,EAEd,kBAAC0C,EAAA,EAAD,CAAMM,WAAS,EAACiB,MAAO,EAAGhB,QAAQ,SAASd,WAAW,UAClD,kBAACO,EAAA,EAAD,CAAMS,MAAI,GACN,kBAACE,EAAA,EAAD,CAAOhE,UAAWU,EAAQ2B,MACtB,kBAACwC,EAAA,EAAD,CACIzD,MAAOT,EAASS,MAChB0D,UAAWnE,EAASoE,WAGxB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAD,CAAqBtE,SAAUA,KAEnC,kBAAC,EAAD,SAbe,kBAAC,EAAD,O,+OCnCnC,IAAMuB,EAAYC,KAAY,SAAAC,GAAK,MAAK,CACpCuB,UAAY,CACRf,QAAU,OACVU,SAAW,OACXR,WAAa,SACbD,eAAiB,UAErBqC,UAAY,CACRC,WAAa/C,EAAMmB,QAAQ,GAC3B6B,YAAahD,EAAMmB,QAAQ,GAC3BC,MAAO,KAEXxB,OAAS,CACLgB,OAASZ,EAAMmB,QAAQ,QA4FhB8B,MAvFf,WAAuB,IAAD,EACQC,mBAAS,CAC/BlE,MAAQ,GACRI,SAAW,GACXuD,SAAW,GACXQ,QAAU,EACVC,aAAc,IANA,mBACXC,EADW,KACJC,EADI,KAYZC,EAAY,SAAAC,GACdA,EAAEC,iBACF,sBAAC,8BAAAC,EAAA,sEAC6BC,MANtB,yCAMiC,CACnCC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBhF,MAAOqE,EAAMrE,MACbI,SAAUiE,EAAMjE,SAChBuD,SAAWU,EAAMV,aAVxB,cACSsB,EADT,gBAayBA,EAAYC,OAbrC,OAaSC,EAbT,OAeG7B,QAAQC,IAAI4B,GAff,0CAAD,IAmBEC,EAAW,SAACC,GACdf,E,yVAAS,CAAD,GAAMD,EAAN,eAAcgB,EAAMC,OAAOC,KAAQF,EAAMC,OAAOjB,UAGtD/E,EAAUwB,IAChB,OACA,6BACI,kBAACb,EAAA,EAAD,CAAYC,QAAQ,IAAIC,UAAU,MAAlC,wBACA,0BAAMvB,UAAWU,EAAQiD,UAAWiD,SAAUjB,GAC1C,6BACI,kBAACkB,EAAA,EAAD,CACI7G,UAAWU,EAAQwE,UACnBvD,GAAG,iBACHqB,OAAO,SACPyC,MAAOA,EAAMrE,MACbuF,KAAK,QACLH,SAAUA,EACVM,YAAY,sBAGpB,6BACI,kBAACD,EAAA,EAAD,CACI7G,UAAWU,EAAQwE,UACnBvD,GAAG,iBACHqB,OAAO,SACPyC,MAAOA,EAAMjE,SACbmF,KAAK,WACLH,SAAUA,EACVM,YAAY,yBAGpB,6BACI,kBAACD,EAAA,EAAD,CACI7G,UAAWU,EAAQwE,UACnBvD,GAAG,iBACHqB,OAAO,SACPyC,MAAOA,EAAMV,SACb4B,KAAK,WACLH,SAAUA,EACVM,YAAY,oBAEhB,kBAAC3G,EAAA,EAAD,CACIC,QAASuF,EACTrE,QAAQ,WACRS,MAAM,UACN/B,UAAWU,EAAQsB,QAJvB,uBC1FVE,EAAYC,IAAY,CAC1B4E,KAAM,CACFC,SAAW,GAEftF,MAAO,CACHa,SAAW,IACXE,UAAY,IACZH,SAAW,IACXM,QAAU,OACVG,cAAgB,OAEpBkE,aAAe,CACXrE,QAAU,OACVC,eAAiB,eACjBF,UAAY,GACZD,aAAe,IAEnBwE,KAAO,CACHjE,QAAS,MCfGkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFyBD,WACf,IAAM/G,EAAUwB,IAEZwF,SAAStG,MAAQ,iBAHS,MAKSkE,mBAAS,CACxC,CACI3D,GAAK,EACLP,MAAQ,qBACRI,SAAW,mCACXuD,SAAW,aACXxE,OAAS,EACToH,QAAU,CAAC,KAEf,CACIhG,GAAK,EACLP,MAAQ,2BACRI,SAAW,6CACXuD,SAAW,UACXxE,OAAS,EACToH,QAAU,CAAC,KACb,CACEhG,GAAK,EACLP,MAAQ,uBACRI,SAAW,iBACXuD,SAAW,QACXxE,OAAS,EACToH,QAAU,CAAC,KACb,CACEhG,GAAK,EACLP,MAAQ,6BACRI,SAAW,0CACXuD,SAAW,aACXxE,OAAS,EACToH,QAAU,CAAC,OAlCO,mBAKnBjE,EALmB,KAKRkE,EALQ,KAmE1B,OAXCC,qBAAU,YACQ,uCAAG,8BAAA/B,EAAA,sEACEC,MAJX,0CAGS,cACV+B,EADU,gBAEQA,EAAIxB,OAFZ,OAEV5C,EAFU,OAGhBkE,EAAalE,GACbgB,QAAQC,IAAIjB,GAJI,2CAAH,qDAMfqE,KACC,IAIL,yBAAK/H,UAAWU,EAAQqG,MAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIiB,KAAK,iBAEb,kBAAC,IAAD,KACI,kBAAC,EAAD,CACIA,KAAK,IACLtE,UAAWA,EACXhD,QAASA,EACTH,OAxCG,SAAAE,GACX,IAAMwH,EAAO,YAAOvE,GACpBuE,EAAQxH,GAAOF,SACfqH,EAAaK,IAsCLzH,SAnCK,SAAAC,GACb,IAAMwH,EAAO,YAAOvE,GACpBuE,EAAQxH,GAAOF,SACfqH,EAAaK,MAkCT,kBAAC,EAAD,CACID,KAAK,gBACLvD,cAjCU,SAAC9C,GACnB,OAAO+B,EAAUwE,MAAK,SAAAC,GAAC,OAAIA,EAAEvG,MAAQD,YE5E7B,MAAS+F,SAASU,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a9519d77.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Navigation = () => {\n    return (\n        <nav className=\"navigation\">\n            <a href=\"/\">Home</a>\n            <a href=\"/\">Questions</a>\n            <a href=\"/\">Ask a Questions</a>\n        </nav>\n    )\n};\n\nexport default Navigation;","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nconst ShareButton = () => {\n    return (\n        <Button onClick={() => alert(\"Good luck sharing that\")}>Share</Button>\n    )\n}\n\nexport default ShareButton;","import React from 'react';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Box from \"@material-ui/core/Box\";\n\nimport ShareButton from \"./ShareButton\";\n\n\n\n\nconst ArrowCounter = ({upVote, downVote, index, classes,question}) => {\n    return(\n        <div>\n            <Box>\n            <div className={classes.icons}>\n                <div >\n                        <IconButton onClick={() => upVote(index)} aria-label=\"Up\">\n                            <ArrowUpward\n                                className={(question.upVote >= 0) ? classes.positiveIcon : classes.negativeIcon}\n                            />\n                        </IconButton>\n                        <IconButton\n                            onClick={() => downVote(index)} aria-label=\"Down\"\n                        >\n                            <ArrowDownward\n                            className={(question.upVote >= 0) ? classes.negativeIcon : classes.positiv}\n                            />\n                        </IconButton>\n                </div> \n                    <div>\n                        <ShareButton />   \n                    </div>  \n            </div>\n               \n            </Box>\n        </div>\n    )\n}\n\nexport default ArrowCounter;","import React from 'react';\nimport Typography from \"@material-ui/core/Typography\";\n\nconst CardTitle = ({question, classes}) => {\n    return(\n        <div className={classes.title}>\n            <Typography variant=\"p\" component=\"p\">{question.title}</Typography>\n            <Typography variant=\"p\" component=\"p\">{question.subtitle}</Typography>\n        </div>\n    )\n}\n\n\nexport default CardTitle;","import React from 'react';\nimport Button from \"@material-ui/core/Button\";\nimport {Link} from \"@reach/router\";\n\nconst CardLinkButton = ({classes, index, question}) => {\n    return(\n        <Link \n            className={classes.paper}\n            id={question._id}\n            key={index}\n            index={index}\n            to={`/question/${question._id}`}><Button color=\"primary\" className={classes.button}>See more</Button>    \n        </Link> \n    )\n}\n\nexport default CardLinkButton;","import React from 'react';\n\nconst Loading = () => {\n    return(\n        <div>...Loading</div>\n    )\n}\n\nexport default Loading;","import React from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\nimport Box from \"@material-ui/core/Box\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\nimport ArrowCounter from './ArrowCounter';\nimport CardTitle from './CardTitle';\nimport CardLinkButton from './CardLinkButton';\nimport Loading from './Loading';\n\nconst useStyles = makeStyles( theme =>({\n    card : {\n        maxWidth : 500,\n        minWidth : 500,\n        maxHeight : 250,\n        minHeight : 250,\n        marginBottom : 40,\n        marginTop : 40,\n        display : 'flex',\n        justifyContent : 'center',\n        alignItems : 'center',\n        flexDirection : 'column', \n        margin : 5,\n        padding : 20\n    },\n    title : {\n        display : 'flex',\n        background : 'whitesmoke',\n        borderRadius : 3,\n        padding : 20,\n        position : 'absolute',\n        marginTop : -140,\n    },\n    Grid : {\n        display: 'flex',\n        alignItems :'center',\n        flexDirection : 'row',\n        flexWrap : 'wrap'\n    },\n    Typography : {\n        marginTop : 20\n    },\n    button : {\n        margin: theme.spacing(1),\n    },\n    icons : {\n        width: 400,\n        display : 'flex',\n        flexDirection : 'row',\n        justifyContent : 'space-between'\n    },\n    negativeIcon : {\n        color : 'red'\n    },\n    positiveIcon : {\n        color : 'green'\n    }\n}));\n\nfunction Questions({questions, upVote, downVote}){\n\n    const classes = useStyles();\n   \n    \n    let content = (!questions) ? <Loading /> : \n \n        <Grid container justify=\"center\" alignItems=\"center\" xs={12}> \n            <Typography className={classes.Typography} variant=\"h3\" component=\"h2\" >Questions</Typography>\n        <Grid justify=\"center\" alignItems=\"center\" container item xs={12} spacing={1} className={classes.Grid}>\n        {questions.map((question, index) => {\n            \n            return (        \n                <Box>\n                        <Card className={classes.card}>\n                                <CardTitle \n                                    classes={classes}\n                                    question={question}\n                                />\n                                <CardLinkButton \n                                    classes={classes}\n                                    index={index}\n                                    question={question}\n                                />\n                                    <p>Votes: {question.upVote}</p>\n                                <ArrowCounter\n                                    upVote={upVote}\n                                    downVote={downVote}\n                                    classes={classes}\n                                    question={question}\n                                    index={index}\n                                />\n                        </Card>\n                </Box>\n                )\n            }\n        )}\n        </Grid>\n    </Grid>\n    return content;\n}\n\nexport default Questions;","import React from 'react';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ShareIcon from \"@material-ui/icons/Share\";\nimport { CardActions,  } from '@material-ui/core';\n\nconst CardIcons = () => {\n    return(\n    <CardActions disableSpacing>\n        <IconButton aria-label=\"add to favorites\">\n            <FavoriteIcon />\n        </IconButton>\n        <IconButton aria-label=\"share\">\n            <ShareIcon  />\n        </IconButton>\n    </CardActions>\n    )}\n\nexport default CardIcons;","import React from 'react';\nimport Typography from \"@material-ui/core/Typography\";\n\nconst QuestionCardCOntent = ({question}) => {\n    return(\n    <div>\n        <Typography variant=\"h6\" color=\"textSecondary\" component=\"p\">\n            Question: {question.subtitle}\n        </Typography>\n        <Typography variant=\"h6\" color=\"textSecondary\" component=\"p\">\n            Votes : {question.upVote}\n        </Typography>\n    </div>\n    )\n}\n\nexport default QuestionCardCOntent","import React from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport { CardContent, CardHeader } from '@material-ui/core';\n\nimport CardIcons from './CardIcons';\nimport Loading from './Loading';\nimport QuestionCardContent from './QuestionCardContent';\n\nconst useStyles = makeStyles(({\n    card : {\n        display : 'flex',\n        flexDirection : 'column', \n        alignItems : 'center',\n        justifyContent : 'center',\n        marginTop : 20,\n    },\n    Grid : {\n        display: 'flex',\n        alignItems :'center',\n        flexDirection : 'row',\n    },\n    Box : {\n        backgroundColor : 'red',\n    },\n    spaceBetween : {\n        display: 'flex',\n        justifyContent : 'space-between'\n    },\n    favoriteIcon : {\n        color: \"red\"\n    }\n}))\n\nfunction Question({getquestionid, id}) {    \n    const classes = useStyles();\n    const question = getquestionid(id);\n\n\n    console.log(question);\n\n    const content = (!question) ?  <Loading /> :  \n\n        <Grid container space={1} justify=\"center\" alignItems=\"center\">\n            <Grid item>\n                <Card  className={classes.card}>\n                    <CardHeader\n                        title={question.title}\n                        subheader={question.category}\n                    >\n                    </CardHeader>\n                    <CardContent >\n                        <QuestionCardContent question={question} />\n                    </CardContent>\n                    <CardIcons />\n                </Card>     \n            </Grid>\n        </Grid>\n\n    return content;\n}\n\nexport default Question;","import React, {useState} from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\n\nconst useStyles = makeStyles( theme => ({\n    container : {\n        display : 'flex',\n        flexWrap : 'wrap',\n        alignItems : 'center',\n        justifyContent : 'center'\n    },\n    textField : {\n        marginLeft : theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 200\n    },\n    button : {\n        margin : theme.spacing(1),\n    }\n}))\n\n\nfunction AddQuestion(){\n    const [value, setValue] = useState({\n        title : '',\n        subtitle : '',\n        category : '',\n        upVotes : 0,\n        isCompleted : false,\n    });\n\n    const url = 'http://localhost:8080/api/v1/questions';\n\n    //Posting input state to api\n    const handleApi = e => { \n        e.preventDefault();\n        (async () => {\n            const rawResponse = await fetch(url, {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                title: value.title,\n                subtitle: value.subtitle,\n                category : value.category\n            })\n            });\n            const content = await rawResponse.json();\n          \n            console.log(content);\n          })();\n       };\n\n    const onChange = (event) => {\n        setValue({ ...value, [event.target.name] : event.target.value});\n    }\n\n    const classes = useStyles();\n    return(\n    <div>\n        <Typography variant=\"p\" component=\"h4\">Submit your question</Typography>\n        <form className={classes.container} onSubmit={handleApi}>\n            <div>\n                <TextField\n                    className={classes.textField}\n                    id=\"standard-basic\"\n                    margin=\"normal\"\n                    value={value.title}\n                    name=\"title\"\n                    onChange={onChange}\n                    placeholder=\"Enter your title\"\n                />\n            </div>\n            <div>\n                <TextField \n                    className={classes.textField}\n                    id=\"standard-basic\"\n                    margin=\"normal\"\n                    value={value.subtitle}\n                    name=\"subtitle\"\n                    onChange={onChange}\n                    placeholder=\"Enter your subtitle\"\n                />\n            </div>\n            <div>\n                <TextField\n                    className={classes.textField}\n                    id=\"standard-basic\"\n                    margin=\"normal\"         \n                    value={value.category}\n                    name=\"category\"\n                    onChange={onChange}\n                    placeholder=\"Choose category\"\n                />                \n                <Button \n                    onClick={handleApi}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    className={classes.button}\n                >Submit Question\n                </Button>\n            </div>\n        </form>\n    </div>\n    )\n}\n\nexport default AddQuestion;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport Navigation from \"./components/Navigation\";\nimport Questions from \"./components/Questions\";\nimport Question from \"./components/Question\";\nimport {Router} from '@reach/router';\nimport AddQuestion from './components/AddQuestion';\n\nconst useStyles = makeStyles(({\n    root: {\n        flexGrow : 1\n    },\n    paper: {\n        minWidth : 350,\n        minHeight : 200,\n        maxWidth : 500,\n        display : 'flex',\n        flexDirection : 'row',\n    },\n    questionGrid : {\n        display : 'flex',\n        justifyContent : 'space-around',\n        marginTop : 30,\n        marginBottom : 30\n    },\n    text : {\n        padding: 10\n    }\n}));\n\nexport default function App() {\nconst classes = useStyles();\n\n    document.title = \"Stack Overflow\";\n\n    const [questions, setQuestions] =  useState([\n        {\n            id : 0,\n            title : 'What is Javascript',\n            subtitle : 'I need more information about it',\n            category : 'Javascript',\n            upVote : 0,\n            answers : ['']\n        },\n        {\n            id : 1,\n            title : 'How to do map() function',\n            subtitle : 'Can someone tell how to do it step by step',\n            category : 'Angular',\n            upVote : 0,\n            answers : ['']\n        },{\n            id : 2,\n            title : 'MongoDB or firebase?',\n            subtitle : 'Cant decide...',\n            category : 'React',\n            upVote : 0,\n            answers : ['']\n        },{\n            id : 3,\n            title : 'Any good tutorials for ES6',\n            subtitle : 'Want to start practice, but dunno where',\n            category : 'Javascript',\n            upVote : 0,\n            answers : ['']\n        }\n    ]);\n\n    const upVote = index => {\n        const newVote = [...questions];\n        newVote[index].upVote++;\n        setQuestions(newVote);\n    };\n\n    const downVote = index => {\n        const newVote = [...questions];\n        newVote[index].upVote--;\n        setQuestions(newVote);\n    };\n\n    const getquestionid = (id) =>  {\n        return questions.find(q => q._id === id);     \n     }\n\n     const url = 'http://localhost:8080/api/v1/questions';\n     //Fetch Questions\n     useEffect(() => {\n        const fetchData = async () => {\n          const res = await fetch(url);\n          const questions = await res.json();\n          setQuestions(questions);\n          console.log(questions);\n        };\n        fetchData();\n      }, []);\n\n\n    return (\n    <div className={classes.root}>\n            <Navigation />\n            <AddQuestion \n                path=\"/addQuestion\"\n            />\n        <Router>\n            <Questions\n                path=\"/\" \n                questions={questions} \n                classes={classes}\n                upVote={upVote}\n                downVote={downVote}\n            />\n            <Question \n                path=\"/question/:id\"\n                getquestionid={getquestionid}  \n            />   \n        </Router>\n    </div>\n  );\n}\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}