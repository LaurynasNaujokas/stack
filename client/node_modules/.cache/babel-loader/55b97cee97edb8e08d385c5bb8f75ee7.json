{"ast":null,"code":"import _slicedToArray from \"/Users/laurynas/Desktop/ReactProjects/stackclone/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/laurynas/Desktop/ReactProjects/stackclone/client/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport Navigation from \"./components/Navigation\";\nimport { Router } from '@reach/router';\nimport AddQuestion from './components/AddQuestion';\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    minWidth: 350,\n    minHeight: 200,\n    maxWidth: 500,\n    display: 'flex',\n    flexDirection: 'row'\n  },\n  questionGrid: {\n    display: 'flex',\n    justifyContent: 'space-around',\n    marginTop: 30,\n    marginBottom: 30\n  },\n  text: {\n    padding: 10\n  }\n});\nexport default function App() {\n  const classes = useStyles();\n\n  const _useState = useState({\n    questions: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        questions = _useState2[0],\n        setQuestions = _useState2[1];\n\n  console.log(questions); //Fetch Data using useEffect\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios('localhost:8080/api/v1/questions/');\n      setQuestions(result.questions);\n    };\n\n    fetchData();\n  }, []);\n\n  const upVote = index => {\n    const newVote = [...questions];\n    newVote[index].upVote++;\n    setQuestions(newVote);\n  };\n\n  const addQuestion = value => {\n    const newQuestions = [...questions, value];\n    setQuestions(newQuestions);\n    console.log(\"1-New Question was created\");\n    console.log(questions);\n  };\n\n  const getquestionid = id => {\n    return questions.find(q => q.id === id);\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Navigation, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(AddQuestion, {\n    path: \"/addQuestion\",\n    addQuestion: addQuestion,\n    questions: questions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Questions, {\n    path: \"/\",\n    questions: questions,\n    setQuestions: setQuestions,\n    upVote: upVote,\n    classes: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(Question, {\n    path: \"/question/:id\",\n    getquestionid: getquestionid,\n    setQuestions: setQuestions,\n    questions: questions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/laurynas/Desktop/ReactProjects/stackclone/client/src/App.js"],"names":["React","useState","useEffect","axios","makeStyles","Navigation","Router","AddQuestion","useStyles","root","flexGrow","paper","minWidth","minHeight","maxWidth","display","flexDirection","questionGrid","justifyContent","marginTop","marginBottom","text","padding","App","classes","questions","setQuestions","console","log","fetchData","result","upVote","index","newVote","addQuestion","value","newQuestions","getquestionid","id","find","q"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAGA,SAAQC,MAAR,QAAqB,eAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,MAAMC,SAAS,GAAGJ,UAAU,CAAE;AAC1BK,EAAAA,IAAI,EAAE;AACFC,IAAAA,QAAQ,EAAG;AADT,GADoB;AAI1BC,EAAAA,KAAK,EAAE;AACHC,IAAAA,QAAQ,EAAG,GADR;AAEHC,IAAAA,SAAS,EAAG,GAFT;AAGHC,IAAAA,QAAQ,EAAG,GAHR;AAIHC,IAAAA,OAAO,EAAG,MAJP;AAKHC,IAAAA,aAAa,EAAG;AALb,GAJmB;AAW1BC,EAAAA,YAAY,EAAG;AACXF,IAAAA,OAAO,EAAG,MADC;AAEXG,IAAAA,cAAc,EAAG,cAFN;AAGXC,IAAAA,SAAS,EAAG,EAHD;AAIXC,IAAAA,YAAY,EAAG;AAJJ,GAXW;AAiB1BC,EAAAA,IAAI,EAAG;AACHC,IAAAA,OAAO,EAAE;AADN;AAjBmB,CAAF,CAA5B;AAsBA,eAAe,SAASC,GAAT,GAAe;AAC9B,QAAMC,OAAO,GAAGhB,SAAS,EAAzB;;AAD8B,oBAESP,QAAQ,CAAC;AAACwB,IAAAA,SAAS,EAAE;AAAZ,GAAD,CAFjB;AAAA;AAAA,QAEnBA,SAFmB;AAAA,QAERC,YAFQ;;AAG1BC,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ,EAH0B,CAK1B;;AACAvB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM2B,SAAS,GAAG,YAAY;AAC5B,YAAMC,MAAM,GAAG,MAAM3B,KAAK,CACxB,kCADwB,CAA1B;AAGAuB,MAAAA,YAAY,CAACI,MAAM,CAACL,SAAR,CAAZ;AACD,KALD;;AAMAI,IAAAA,SAAS;AACV,GARM,EAQJ,EARI,CAAT;;AAUA,QAAME,MAAM,GAAGC,KAAK,IAAI;AACpB,UAAMC,OAAO,GAAG,CAAC,GAAGR,SAAJ,CAAhB;AACAQ,IAAAA,OAAO,CAACD,KAAD,CAAP,CAAeD,MAAf;AACAL,IAAAA,YAAY,CAACO,OAAD,CAAZ;AACH,GAJD;;AAOA,QAAMC,WAAW,GAAGC,KAAK,IAAI;AACzB,UAAMC,YAAY,GAAG,CAAC,GAAGX,SAAJ,EAAeU,KAAf,CAArB;AACAT,IAAAA,YAAY,CAACU,YAAD,CAAZ;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACH,GALD;;AAOA,QAAMY,aAAa,GAAIC,EAAD,IAAS;AAC3B,WAAOb,SAAS,CAACc,IAAV,CAAeC,CAAC,IAAIA,CAAC,CAACF,EAAF,KAASA,EAA7B,CAAP;AACF,GAFF;;AAKA,SACA;AAAK,IAAA,SAAS,EAAEd,OAAO,CAACf,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACQ,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADR,EAEQ,oBAAC,WAAD;AACI,IAAA,IAAI,EAAC,cADT;AAEI,IAAA,WAAW,EAAEyB,WAFjB;AAGI,IAAA,SAAS,EAAET,SAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,EAOI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,IAAI,EAAC,GADT;AAEI,IAAA,SAAS,EAAEA,SAFf;AAGI,IAAA,YAAY,EAAEC,YAHlB;AAII,IAAA,MAAM,EAAEK,MAJZ;AAKI,IAAA,OAAO,EAAEP,OALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAQI,oBAAC,QAAD;AACI,IAAA,IAAI,EAAC,eADT;AAEI,IAAA,aAAa,EAAEa,aAFnB;AAGI,IAAA,YAAY,EAAEX,YAHlB;AAII,IAAA,SAAS,EAAED,SAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,CAPJ,CADA;AA2BH","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport Navigation from \"./components/Navigation\";\n\n\nimport {Router} from '@reach/router';\nimport AddQuestion from './components/AddQuestion';\n\nconst useStyles = makeStyles(({\n    root: {\n        flexGrow : 1\n    },\n    paper: {\n        minWidth : 350,\n        minHeight : 200,\n        maxWidth : 500,\n        display : 'flex',\n        flexDirection : 'row',\n    },\n    questionGrid : {\n        display : 'flex',\n        justifyContent : 'space-around',\n        marginTop : 30,\n        marginBottom : 30\n    },\n    text : {\n        padding: 10\n    }\n}));\n\nexport default function App() {\nconst classes = useStyles();\n    const [questions, setQuestions] =  useState({questions: [] });\n    console.log(questions);\n\n    //Fetch Data using useEffect\n    useEffect(() => {\n        const fetchData = async () => {\n          const result = await axios(\n            'localhost:8080/api/v1/questions/',\n          );\n          setQuestions(result.questions);\n        };\n        fetchData();\n      }, []);\n\n    const upVote = index => {\n        const newVote = [...questions];\n        newVote[index].upVote++\n        setQuestions(newVote);\n    };\n\n\n    const addQuestion = value => {\n        const newQuestions = [...questions, value ];\n        setQuestions(newQuestions);\n        console.log(\"1-New Question was created\")\n        console.log(questions);\n    };\n\n    const getquestionid = (id) =>  {\n        return questions.find(q => q.id === id);     \n     }\n\n\n    return (\n    <div className={classes.root}>\n            <Navigation />\n            <AddQuestion \n                path=\"/addQuestion\"\n                addQuestion={addQuestion}\n                questions={questions}\n            />\n        <Router>\n            <Questions\n                path=\"/\" \n                questions={questions} \n                setQuestions={setQuestions}\n                upVote={upVote}\n                classes={classes}\n            />\n            <Question \n                path=\"/question/:id\"\n                getquestionid={getquestionid}  \n                setQuestions={setQuestions}\n                questions={questions}\n            />\n            \n           \n        </Router>\n    </div>\n  );\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}